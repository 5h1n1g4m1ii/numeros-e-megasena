1----------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
} Node;

// Função para inserir um número na lista em ordem crescente
void insertInOrder(Node** head, int num) {
    
    // Criar um novo nó
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = num;
    newNode->prev = NULL;
    newNode->next = NULL;
   
    // Se a lista estiver vazia, o novo nó se torna o primeiro nó
    if (*head == NULL) {
        *head = newNode;
        return;
    }
   
    // Se o número for menor que o primeiro nó, o novo nó se torna o novo primeiro nó
    if (num < (*head)->data) {
        newNode->next = *head;
        (*head)->prev = newNode;
        *head = newNode;
        return;
    }
    
    // Encontrar a posição correta na lista para inserir o novo nó
    Node* current = *head;
    while (current->next != NULL && num >= current->next->data) {
        current = current->next;
    }
    
    // Inserir o novo nó na posição correta
    newNode->next = current->next;
    newNode->prev = current;
    if (current->next != NULL) {
        current->next->prev = newNode;
    }
    current->next = newNode;
}
// Função para remover os números primos da lista
void removePrimes(Node** head) {
    Node* current = *head;
    Node* nextNode;
    while (current != NULL) {
        nextNode = current->next;

        // Verificar se o número é primo
        int isPrime = 1;
        for (int i = 2; i <= current->data / 2; i++) {
            if (current->data % i == 0) {
                isPrime = 0;
                break;
            }
        }

        // Remover o número primo da lista
        if (isPrime) {
            if (current->prev != NULL) {
                current->prev->next = current->next;
            } else {
                *head = current->next;
            }
            if (current->next != NULL) {
                current->next->prev = current->prev;
            }
            free(current);
        }

        current = nextNode;
    }
}

// Função para imprimir a lista em ordem crescente e decrescente
void printList(Node* head) {
    printf("Lista crescente: ");
    Node* current = head;
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");

    printf("Lista decrescente: ");
    current = head;
    while (current->next != NULL) {
        current = current->next;
    }
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->prev;
    }
    printf("\n");
}

int main() {
    int vetor[1000];
    Node* lista = NULL;

    // Gerar números aleatórios e armazená-los no vetor
    for (int i = 0; i < 1000; i++) {
        vetor[i] = rand() % 19999 - 9999;
    }

    // Inserir números na lista em ordem crescente
    for (int i = 0; i < 1000; i++) {
        insertInOrder(&lista, vetor[i]);
    }

    // Imprimir lista em ordem crescente e decrescente
    printList(lista);

    // Remover números primos da lista
    removePrimes(&lista);

    // Imprimir lista após a remoção dos números primos
    printList(lista);

    return 0;
}
2---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define TAMANHO_LISTA 51000000
#define TAMANHO_SEQUENCIA 6

void preencherLista(int lista[]) {
    int i;
    srand(time(NULL));
    
    for (i = 0; i < TAMANHO_LISTA; i++) {
        lista[i] = rand() % 60 + 1;
    }
}

void procurarSequencia(int lista[], int sequencia[], int tamanhoSequencia) {
    int i, j;
    int ocorrencias = 0;
    
    for (i = 0; i <= TAMANHO_LISTA - tamanhoSequencia; i++) {
        if (lista[i] == sequencia[0]) {
            for (j = 1; j < tamanhoSequencia; j++) {
                if (lista[i + j] != sequencia[j]) {
                    break;
                }
            }
            
            if (j == tamanhoSequencia) {
                printf("Sequência encontrada na posição %d.\n", i);
                ocorrencias++;
            }
        }
    }
    
    printf("A sequência aparece %d vez(es) na lista.\n", ocorrencias);
}

void procurarSequenciaInversa(int lista[], int sequencia[], int tamanhoSequencia) {
    int i, j;
    int ocorrencias = 0;
    
    for (i = TAMANHO_LISTA - tamanhoSequencia; i >= 0; i--) {
        if (lista[i] == sequencia[tamanhoSequencia - 1]) {
            for (j = tamanhoSequencia - 2; j >= 0; j--) {
                if (lista[i - (tamanhoSequencia - j - 1)] != sequencia[j]) {
                    break;
                }
            }
            
            if (j == -1) {
                printf("Sequência encontrada na posição %d.\n", i - tamanhoSequencia + 1);
                ocorrencias++;
            }
        }
    }
    
    printf("A sequência aparece %d vez(es) na lista em ordem inversa.\n", ocorrencias);
}

int main() {
    int lista[TAMANHO_LISTA];
    int sequencia[] = {1, 15, 16, 25, 32, 36};
    
    preencherLista(lista);
    
    printf("Procurando a sequência na lista em ordem direta...\n");
    procurarSequencia(lista, sequencia, TAMANHO_SEQUENCIA);
    
    printf("\n");
    
    printf("Procurando a sequência na lista em ordem inversa...\n");
    procurarSequenciaInversa(lista, sequencia, TAMANHO_SEQUENCIA);
    
    return 0;
}
